[{"categories":null,"content":"本文指导如何处理PyCharm中关于MicrosoftWebDriver.exe路径错误，需下载对应浏览器驱动，如Edge驱动，重命名并将其放置在Python安装目录下，以便PyCharm正常使用Selenium打开浏览器。edge驱动下载地址：驱动程序 将下载好的驱动程序解压。 找到python的目录文件，将Edge驱动程序放置在python根目录下。 注：如果不知道自己的python安装在什么位置了，可以打开cmd键入“where python” 3.完成以上步骤你得pycharm就可以正常打开浏览器了。 driver = webdriver.Edge() url = \"https://www.baidu.com\" driver.get(url) ","date":"2024-08-19","objectID":"/posts/text19/:0:0","tags":["Python"],"title":"Python的WebDriver问题","uri":"/posts/text19/"},{"categories":null,"content":" //报错信息 Failed to connect to github.com port 443: Connection refused. //报错翻译 连接github.com 443端口失败:连接拒绝 解决办法： 排查代理问题 尝试重置代理或者取消代理的方式： git config --global --unset http.proxy git config --global --unset https.proxy 如果没效果，接着添加全局代理试试： git config --global http.proxy git config --global https.proxy 如果以上问题还未得到解决 排查DNS解析问题 在DNS解析前先会尝试走hosts，然后在找不到的的情况下再DNS解析,修改hosts文件域名解析就会先走hosts中的ip和域名的映射关系。 我们可以修改hosts文件，修改ip地址和域名的映射关系： Windows：位于C:\\Windows\\System32\\drivers\\etc ping gitHub.com 20.205.243.166 github.com 140.82.112.4 github.com 151.101.1.6 github.global.ssl.fastly.net 185.199.108.153 assets-cdn.github.com 185.199.109.153 assets-cdn.github.com 185.199.110.153 assets-cdn.github.com 185.199.111.153 assets-cdn.github.com 【注意：用“管理员身份运行记事本”进行hosts文件的修改】 刷新DNS ipconfig /flushdns ","date":"2024-08-11","objectID":"/posts/text09/:0:0","tags":["git","gitHub"],"title":"git克隆失败解决办法","uri":"/posts/text09/"},{"categories":null,"content":"官网下载Typora 网址：Typora 官方中文站 (typoraio.cn) 安装Typora 双击Typora.exe 安装完成 激活方法 安装路径下找到：Typora\\resources\\page-dist\\static\\js 右键用记事本打开这个文件，ctrl+F定位到 e.hasActivated=\"true\"==e.hasActivated 替换为 e.hasActivated=\"true\"==\"true\" 这样就已经后台激活完成，但是每次开软件开始会提醒激活。 关闭软件每次启动时的已激活弹窗 继续在安装路径下resources\\page-dist\\license.html，找到 依旧ctrl+F 定位到： \u003c/body\u003e\u003c/html\u003e 替换为 \u003c/body\u003e\u003cscript\u003ewindow.οnlοad=function(){setTimeout(()=\u003e{window.close();},5);}\u003c/script\u003e\u003c/html\u003e 去除软件左下角“未激活”提示 按照安装路径，找到 resources\\locales\\zh-Hans.lproj\\Panel.json 文件中查找： \"UNREGISTERED\":\"未激活\"， 替换为： \"UNREGISTERED\":\" \" 最后，重新打开Typora，手动关掉激活窗口，之后就不会再出现。 引用图片 注意：Typora 使用带图片的文件，使用相对路径，创建带图片的笔记时，.md文件命名需为index。自动访问路径中的index文件，剪切图片时自动生成image文件夹，使得图片相对路径访问正常 【注意：我的安装路径位置在 C:\\Program Files\\Typora】 ","date":"2024-08-11","objectID":"/posts/text08/:0:0","tags":["Typora"],"title":"破解/安装激活 Typora 2024 教程","uri":"/posts/text08/"},{"categories":null,"content":"Hugo 是 Go 编写的静态网站生成器，速度快，易用，可配置。 Hugo 依赖于 Markdown 文件，元数据字体 。用户可以从任意的目录中运行 Hugo，支持共享主机和其他系统。只需要几分之一秒就可以渲染一个经典的中型网站，非常适合博客，文档等等网站的生成。 ","date":"2024-08-09","objectID":"/posts/text07/:0:0","tags":["hugo","本地服务器","内网穿透","gitHub"],"title":"HUGO博客网站搭建","uri":"/posts/text07/"},{"categories":null,"content":"安装环境 安装好Windows版本的 git： git官网：https://git-scm.com/downloads git安装教程请参考：【 Windows系统Git安装教程（详解Git安装过程） - 学为所用 - 博客园 (cnblogs.com)】 下载并安装Windows版本的 GO： go的中文官网：https://go.p2hp.com/ 下载并安装Windows版本的 hugo： hugo·GitHub 地址 https://github.com/gohugoio/hugo/releases 本教程中下载的项目压缩包名为：hugo_extended_0.128.2_windows-amd64 压缩包下载路径：https://github.com/gohugoio/hugo/releases/download/v0.128.2/hugo_extended_0.128.2_windows-amd64.zip ","date":"2024-08-09","objectID":"/posts/text07/:0:1","tags":["hugo","本地服务器","内网穿透","gitHub"],"title":"HUGO博客网站搭建","uri":"/posts/text07/"},{"categories":null,"content":"配置环境变量 创建程序目录 在C盘新建一个名为hugo的文件夹，进入文件夹后再创建一个名为bin的文件夹 将下载好的Windows版本hugo应用程序压缩包解压到这个bin文件夹 配置环境变量 然后在Windows搜索栏中搜索环境变量，点击环境变量 选择系统变量中的Path，点击新建 将 C:\\hugo\\bin 这个路径添加到环境变量 查看程序版本 然后打开powershell终端，输入下方命令查看 hugo version 显示版本号，即为成功安装了hugo程序。 ","date":"2024-08-09","objectID":"/posts/text07/:0:2","tags":["hugo","本地服务器","内网穿透","gitHub"],"title":"HUGO博客网站搭建","uri":"/posts/text07/"},{"categories":null,"content":"创建博客网站 现在我们就可以使用hugo搭建一个属于自己的博客网站了。 创建站点 首先，我们进入到C盘下的hugo文件夹，点击鼠标右键选择在终端中打开 执行下方命令创建一个静态站点：（本例创建的站点名为myblog，大家可以自定义） hugo new site myblog 创建后，我们回到hugo目录，可以看到新增了一个名为myblog的文件夹： 进入该文件夹后，就能看到刚刚创建的博客网站程序： 在站点中创建一篇文章 创建好了站点后，现在网站中还什么内容都没有，我们可以创建一篇文章来进行一下测试： 现在我们在终端中执行下方命令，进入站点目录： 进入网站目录后，执行下方命令创建一篇markdown格式的文章： hugo new posts/Articles01.md 执行后可以看到提示已经创建了一篇名为Articles01的文章与其所属路径。 进入这个路径，就能看到文章了。 打开这篇文章后能看到这篇文章的标题，日期等相关信息 在这里我们需要把draft（草稿） = true 修改为 draft = false 来表示这并不是一篇草稿。 然后随便在文档中写一些内容，比如： 然后保存关闭即可。 为网站添加主题 现在我们已经创建好了一个博客网站，并在网站中发布了一篇文章，不过现在我们还不能在浏览器中运行这个本地网站进行查看，因为在这之前，我们需要先给网站添加一个主题。 我们可以登录下方的hugo官网页面来挑选一个你喜欢的网站主题： https://themes.gohugo.io/themes 这里我们随便选择一个主题，点击进入页面后，可以看到安装方式： 可以看到，想要安装这个网站主题，需要先在终端中进入站点目录： cd myblog 也可以想上边一样，在myblog目录中右键在终端中打开。 然后执行下方命令： git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c 然后在打开名为 hugo 的 toml源文件，添加主题配置即可。 网站标题修改为myblog，然后再把theme = “m10c”这行代码加进去保存即可。 现在，我们在myblog目录下的主题文件夹中就能看到刚才添加的主题文件目录了： 本地访问测试 现在，我们在终端中执行下方代码启动本地网站进行测试： hugo server 本地清除缓存运行 hugo server --disableFastRender --gc --noHTTPCache --noBuildLock --logLevel debug 可以看到成功启动，在浏览器中输入 localhost:1313/ 即可访问这个本地站点： 可以看到网站标题为myblog，里边有刚才我们发布的第一篇文章Article01： 点击文章标题Article01，即可进入文章页面。 这样我们就成功使用HUGO在Windows本地快速部署了一个静态博客网站。 ","date":"2024-08-09","objectID":"/posts/text07/:0:3","tags":["hugo","本地服务器","内网穿透","gitHub"],"title":"HUGO博客网站搭建","uri":"/posts/text07/"},{"categories":null,"content":"安装内网穿透工具 目前我们在本机成功部署了一个博客网站，但如果没有公网IP的话，只能在本地局域网环境使用，有一定局限性。如果出差在外想要远程使用的话，可以结合Cpolar内网穿透生成公网地址，免去了本地重新部署过程，只需要使用公网地址直接就可以访问本地部署的网站，进行演示。 点击进入cpolar官网注册一个账号，并下载最新版本的Cpolar https://www.cpolar.com/ 登录成功后，点击下载Cpolar到本地并安装（一路默认安装即可）本教程选择下载Windows版本。 Cpolar安装成功后，在浏览器上访问 localhost:9200，使用cpolar账号登录,登录后即可看到Cpolar web 配置界面,结下来在web 管理界面配置即可。 http://localhost:9200/#/login?redirect=%2Fdashboard 【hugo-账户：1437059026@qq.com 密码：Wty201408.】 配置公网地址 接下来配置一下本地 博客网站 的公网地址， 登录后，点击左侧仪表盘的隧道管理——创建隧道， 创建一个 博客网站 的公网地址隧道： 隧道名称：可自定义命名，注意不要与已有的隧道名称重复 协议：选择 本地地址：1313 域名类型：选择随机域名 地区：选择China VIP 点击创建 隧道创建成功后，点击左侧的状态——在线隧道列表,查看所生成的公网访问地址，有两种访问方式。 使用任意一个上面生成的公网地址,在电脑或任意设备在浏览器进行登录访问,即可成功看到 本地博客网站 界面,这样一个可以远程访问的公网地址就创建好了,使用了Cpolar的公网域名,无需自己购买云服务器,即可在公网访问本地部署的服务了！ ","date":"2024-08-09","objectID":"/posts/text07/:0:4","tags":["hugo","本地服务器","内网穿透","gitHub"],"title":"HUGO博客网站搭建","uri":"/posts/text07/"},{"categories":null,"content":"搭建本地服务器 内网穿透地址会随着ip的更新而变化，为了保证不一直修改baseUrl，配置服务器来搭载网站。 配置本地服务器，将编译后的网站文件运行与服务器后，本地可以不启动hugo server 在控制面板打开命令提示符窗格，键入npm install -g anywhere 9999 npm install -g anywhere 9999 9999这里是设置端口号，端口号自行设置，也可以不输入xxx会默认8000端口号 安装成功anywhere后，可以直接使用anywhere指令启动服务，但是默认是查看全部文件列表 编译网站文件并运行于本地服务器 进入myblog根目录下，输入hugo命令进行编译 hugo 编译后，生成public文件夹，进入该文件夹根目录，并输入anywhere使编译文件运行在上面 cd public anywhere 【特别注意：运行在服务器上的一定是：\"编译后的文件！！！！\"】 ","date":"2024-08-09","objectID":"/posts/text07/:0:5","tags":["hugo","本地服务器","内网穿透","gitHub"],"title":"HUGO博客网站搭建","uri":"/posts/text07/"},{"categories":null,"content":"BaseUrl配置 使用hugo server本地运行的程序，每次跳转都将走localhost或者127.0.0.1，此处理解和其他程序启动一样，访问及跳转都将走本地。 若要使baseURL配置每次跳转时，自动请求的域名地址为服务器地址，则需要设置.toml文件中的baseURL。 baseURL = 'http://136c5bcc.r16.vip.cpolar.cn/' //内网穿透地址 baseURL = 'http://192.168.9.125/' //本地服务器地址 内网穿透地址需先将本地服务器内网地址先生成，再配置。配置方法同小结6相同，配置好后如图 逻辑为： 1、配置本地baseURL为内网穿透地址，使每次访问均可访问内网穿透地址 2、编译文件后，跳转路径指向内网穿透地址 3、内网穿透地址配置localhost:8000指向本地服务器 4、启动本地服务器，使内网穿透访问正常 5、使跳转路径正常 当此处修改为内网穿透地址后，需先进行编译，再通过本地服务器启动后的地址后，记得编译之后再运行本地服务器 ","date":"2024-08-09","objectID":"/posts/text07/:0:6","tags":["hugo","本地服务器","内网穿透","gitHub"],"title":"HUGO博客网站搭建","uri":"/posts/text07/"},{"categories":null,"content":"创建 GitHub Pages 站点 GitHub提供了Github pages用于挂在类似于hugo，hexo这样的博客静态网页， 官方教程：https://docs.github.com/zh/enterprise-server@3.12/pages/getting-started-with-github-pages/creating-a-github-pages-site GitHub登陆后，新建仓库Wangty654.github.io 注意仓库名需要和账户名一致 修改博客配置文件.toml中的默认跳转地址为仓库名 baseURL = 'https://Wangty654.github.io' //仓库服务器地址 仓库建好后，进入博客根目录，编译网站 cd myblog C:/hugo/myblog \u003e hugo 生成的编译后文件夹public为所有html、css、js组成的静态网站文件 上传GitHub cd public C:/hugo/myblog/public \u003e git init git add . git commit -m '1' git push 请求成功后直接访问https://Wangty654.github.io即可 ","date":"2024-08-09","objectID":"/posts/text07/:0:7","tags":["hugo","本地服务器","内网穿透","gitHub"],"title":"HUGO博客网站搭建","uri":"/posts/text07/"},{"categories":null,"content":"网站样式自定义设置 关于themes主题 themes主题为git拉取下来用于整个静态网站的样式代码，均可按照需求进行修改 10.1.1头像设置 1、在layouts包下，有一个baseof.html文件，将其中的首页文件指向调整为你想要的图片 2、并同时更改static文件夹中的图片，使指向和文件名一致。 10.1.2 主题颜色设置 1、拷取themes中配置文件config.toml里默认设置主题颜色的部分代码 默认主题有三种样式 选择其中一种样式，放入我们的配置文件hugo.toml，可以对其中的文字颜色也进行修改，本主题改为粉色 10.1.3 主页文字设置 更改layouts包下，baseof.html文件中书写首页介绍文字的位置 10.1.4 主页分类菜单设置 1、配置文件hugo.html中配置菜单栏 2、并在每条笔记中，使用yaml格式书写抬头 10.1.5 主页关于菜单设置 取主题中content包下的about文件放入myblog的content包根目录下。about内的内容可以自行定义 10.1.6 关于代码块样式设置 配置文件中写入设置样式的命令模块，根据需要更改其中style的值。 hugo中文文档中 ：https://hugo.opendocs.io/getting-started/ 选择“内容管理” - “语法高亮” 在style中选择想要更改的样式，放入配置文件中：https://xyproto.github.io/splash/docs/ ","date":"2024-08-09","objectID":"/posts/text07/:0:8","tags":["hugo","本地服务器","内网穿透","gitHub"],"title":"HUGO博客网站搭建","uri":"/posts/text07/"},{"categories":null,"content":"String转为int，使用parseInt，或者valueOf.intValue int i = Integer.parseInt（string）; int i = Integer.valueOf(s).intValue(); int转为String，使用valueOf，或者toString，或者\"“空字符串相加 String s = String.valueOf(i); String s = Integer.toString(i); String s = \"\" + i; ","date":"2024-08-09","objectID":"/posts/text02/:0:0","tags":["java"],"title":"Java中int与String互相转换方法","uri":"/posts/text02/"},{"categories":null,"content":"利用原生JSON对象，将对象转为字符串，使用 JSON.stringify（对象名） var jsObj = {}; jsObj.testArray = [1,2,3,4,5]; jsObj.name = 'CSS3'; jsObj.date = '8 May, 2011'; var str = JSON.stringify(jsObj); alert(str); 从JSON字符串转为对象 ，使用JSON.parse（字符串名） var jsObj = {}; jsObj.testArray = [1,2,3,4,5]; jsObj.name = 'CSS3'; jsObj.date = '8 May, 2011'; var str = JSON.stringify(jsObj); var str1 = JSON.parse(str); alert(str1); ","date":"2024-08-09","objectID":"/posts/text01/:0:0","tags":["JavaScript"],"title":"JS 中Object和String互转方法","uri":"/posts/text01/"},{"categories":null,"content":"数字短信验证码 思路： a.两个文本框+一个获取验证码按钮，文本框用来输入手机号和获取到的验证码，按钮负责点击和记录倒计时； b.js书写定时器setTimeout，进行60秒验证码失效时间记录； c.后台提供短信获取验证的接口，我们把手机号作为参数上传，后台获取到后给该手机号下发验证码 下放代码可以直接 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003ctitle\u003eTitle\u003c/title\u003e \u003c/head\u003e \u003cscript type=\"text/javascript\" src=\"https://libs.baidu.com/jquery/2.1.4/jquery.min.js\" \u003e //验证码 var counts = 60; function settime(val) { if(counts == 0) { val.removeAttribute(\"disabled\"); val.value = \"获取验证码\"; counts = 60; return false; } else { val.setAttribute(\"disabled\", true); val.value = \"重新发送（\" + counts + \"）\"; counts--; } setTimeout(function() { settime(val); }, 1000); } $(function(){ //获取验证码 $(\"#verCodeBtn\").click(function() { var userinfo = { \"UserPhoneNum\": '86//' + $(\"input[name='phone']\").val() } $.ajax({ url: \"https://www.xxxxx.cn/user/sendcode/\", data: userinfo, type: \"get\", success: function(data) { if(JSON.parse(data).state === 404 || JSON.parse(data).state === 202 || userinfo.UserPhoneNum === '86//') { alert(\"验证码发送失败\") } else { alert(\"验证码发送成功，请耐心等待\") } }, error: function() { alert(\"发送失败\"); } }); }); }) \u003c/script\u003e \u003cbody\u003e \u003cinput type=\"text\" name=\"phone\" id=\"phone\" value=\"\" placeholder=\"请输入手机号\" maxlength=\"11\" /\u003e \u003cinput type=\"\" name=\"verCode\" id=\"verCode\" value=\"\" placeholder=\"请输入验证码\" maxlength=\"6\"/\u003e \u003cinput type=\"button\" name=\"\" id=\"verCodeBtn\" value=\"获取验证码\" onclick=\"settime(this);\"/\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2024-08-09","objectID":"/posts/text14/:0:1","tags":["JavaScript"],"title":"JS 验证码功能的三种实现方式","uri":"/posts/text14/"},{"categories":null,"content":"图形验证码 概要：一般的图形验证码就像上方的短信验证码一样，就是后台生成的验证码图片返回给前端的，那样的话就比较简单，因为复杂的都让后台解决了，我在这里主要说的是另一种，就是不调用后台接口，通过canvas画布来解决图形验证码。 思路： a.一个文本框用来输入由数字和字母组合的验证码+一个画布标签来显示图形验证码+一个提交按钮； b.提交按钮进行表单验证，输入正确或者错误进行相应的提示； c.用画布生成并渲染出验证码图形，并且得到随机的颜色值； \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003ctitle\u003e验证码\u003c/title\u003e \u003cstyle\u003e .input-val { width: 150px; height: 30px; border: 1px solid #ddd; box-sizing: border-box;/*box-sizing 属性允许你以某种方式定义某些元素，以适应指定区域。*/ } #canvas { vertical-align: middle;/*vertical-align属性设置一个元素的垂直对齐。*/ box-sizing: border-box; border: 1px solid #ddd; cursor: pointer; } .btn { display: block; margin-top: 10px; height: 30px; width: 80px; font-size: 16px; color: #fff; background-color: #409EFE; border: 1px solid #EBEDEF; border-radius: 50px; } \u003c/style\u003e \u003c/head\u003e \u003cscript type=\"text/javascript\" src=\"https://libs.baidu.com/jquery/2.1.4/jquery.min.js\" \u003e\u003c/script\u003e \u003cscript\u003e $(function(){ var show_num = []; draw(show_num); $(\"#canvas\").on('click',function(){ draw(show_num); }) $(\".btn\").on('click',function(){ var val = $(\".input-val\").val().toLowerCase(); //toLowerCase()函数将字符串中的所有字符转为小写。所以输入框不区分大小写。 var num = show_num.join(\"\"); if(val==''){ alert('请输入验证码！'); }else if(val == num){ alert('提交成功！'); $(\".input-val\").val(''); }else{ alert('验证码错误！请重新输入！'); $(\".input-val\").val(''); } }) }) function draw(show_num) {//生成并渲染出验证码图形 var canvas_width=$('#canvas').width(); var canvas_height=$('#canvas').height(); var canvas = document.getElementById(\"canvas\");//获取canvas var context = canvas.getContext(\"2d\");//获取到canvas画图的环境 canvas.width = canvas_width; canvas.height = canvas_height; var sCode = \"A,B,C,E,F,G,H,J,K,L,M,N,P,Q,R,S,T,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,m,n,p,q,r,s,t,u,v,w,x,y,z,1,2,3,4,5,6,7,8,9,0\"; var aCode = sCode.split(\",\"); var aLength = aCode.length;//获取到数组的长度 for (var i = 0; i \u003c 4; i++) { //这里的for循环可以控制验证码位数 var j = Math.floor(Math.random() * aLength);//获取到随机的索引值 var deg = Math.random() - 0.5; //产生一个随机弧度 var txt = aCode[j];//得到随机的一个内容 show_num[i] = txt.toLowerCase(); var x = 10 + i * 20;//文字在canvas上的x坐标 var y = 20 + Math.random() * 8;//文字在canvas上的y坐标 context.font = \"bold 24px 微软雅黑\"; context.translate(x, y); context.rotate(deg); context.fillStyle = randomColor(); context.fillText(txt, 0, 0); context.rotate(-deg); context.translate(-x, -y); } for (var i = 0; i \u003c= 5; i++) { //验证码上显示线条 context.strokeStyle = randomColor(); context.beginPath(); context.moveTo(Math.random() * canvas_width, Math.random() * canvas_height); context.lineTo(Math.random() * canvas_width, Math.random() * canvas_height); context.stroke(); } for (var i = 0; i \u003c= 20; i++) { //验证码上的小点 context.strokeStyle = randomColor();//随机生成 context.beginPath(); var x = Math.random() * canvas_width; var y = Math.random() * canvas_height; context.moveTo(x, y); context.lineTo(x + 1, y + 1); context.stroke(); } } function randomColor() {//得到随机的颜色值 var r = Math.floor(Math.random() * 256); var g = Math.floor(Math.random() * 256); var b = Math.floor(Math.random() * 256); return \"rgb(\" + r + \",\" + g + \",\" + b + \")\"; } \u003c/script\u003e \u003cbody\u003e \u003cdiv class=\"code\"\u003e \u003cinput type=\"text\" value=\"\" placeholder=\"请输入验证码\" class=\"input-val\"\u003e \u003ccanvas id=\"canvas\" width=\"100\" height=\"30\"\u003e\u003c/canvas\u003e \u003cbutton class=\"btn\"\u003e验证\u003c/button\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2024-08-09","objectID":"/posts/text14/:0:2","tags":["JavaScript"],"title":"JS 验证码功能的三种实现方式","uri":"/posts/text14/"},{"categories":null,"content":"滑动验证码 滑块登录，是完成拼图形式的，我下面这个原理是一样的，逻辑是根据鼠标滑动轨迹，坐标位置，计算拖动速度等等来判断是否人为操作，如果小伙伴想做和博客园效果一样的，那么可以用来做参考。 思路： a.由三个div组成，构成了滑块和底部进度条的效果； b.书写js,注册鼠标按下，悬浮，松开事件； c.记录滑块移动的距离和状态进行判断是否成功； html \u003cdiv class=\"drag\"\u003e \u003cdiv class=\"bg\"\u003e\u003c/div\u003e \u003cdiv class=\"text\" onselectstart=\"return false;\"\u003e请拖动滑块解锁\u003c/div\u003e \u003cdiv class=\"btn\"\u003e\u0026gt;\u0026gt;\u003c/div\u003e \u003c/div\u003e css \u003cstyle\u003e .drag{ width: 300px; height: 40px; line-height: 40px; background-color: #e8e8e8; position: relative; margin:0 auto; } .bg{ width:40px; height: 100%; position: absolute; background-color: #75CDF9; } .text{ position: absolute; width: 100%; height: 100%; text-align: center; user-select: none; } .btn{ width:40px; height: 38px; position: absolute; border:1px solid #ccc; cursor: move; font-family: \"宋体\"; text-align: center; background-color: #fff; user-select: none; color:#666; } \u003c/style\u003e js \u003cscript\u003e //一、定义一个获取DOM元素的方法 var $ = function(selector){ return document.querySelector(selector); }, box = $(\".drag\"),//容器 bg = $(\".bg\"),//背景 text = $(\".text\"),//文字 btn = $(\".btn\"),//滑块 success = false,//是否通过验证的标志 distance = box.offsetWidth - btn.offsetWidth;//滑动成功的宽度（距离） //二、给滑块注册鼠标按下事件 btn.onmousedown = function(e){ //1.鼠标按下之前必须清除掉后面设置的过渡属性 btn.style.transition = \"\"; bg.style.transition =\"\"; //说明：clientX 事件属性会返回当事件被触发时，鼠标指针向对于浏览器页面(或客户区)的水平坐标。 //2.当滑块位于初始位置时，得到鼠标按下时的水平位置 var e = e || window.event; var downX = e.clientX; //三、给文档注册鼠标移动事件 document.onmousemove = function(e){ var e = e || window.event; //1.获取鼠标移动后的水平位置 var moveX = e.clientX; //2.得到鼠标水平位置的偏移量（鼠标移动时的位置 - 鼠标按下时的位置） var offsetX = moveX - downX; //3.在这里判断一下：鼠标水平移动的距离 与 滑动成功的距离 之间的关系 if( offsetX \u003e distance){ offsetX = distance;//如果滑过了终点，就将它停留在终点位置 }else if( offsetX \u003c 0){ offsetX = 0;//如果滑到了起点的左侧，就将它重置为起点位置 } //4.根据鼠标移动的距离来动态设置滑块的偏移量和背景颜色的宽度 btn.style.left = offsetX + \"px\"; bg.style.width = offsetX + \"px\"; //如果鼠标的水平移动距离 = 滑动成功的宽度 if( offsetX == distance){ //1.设置滑动成功后的样式 text.innerHTML = \"验证通过\"; text.style.color = \"#fff\"; btn.innerHTML = \"\u0026radic;\"; btn.style.color = \"green\"; bg.style.backgroundColor = \"lightgreen\"; //2.设置滑动成功后的状态 success = true; //成功后，清除掉鼠标按下事件和移动事件（因为移动时并不会涉及到鼠标松开事件） btn.onmousedown = null; document.onmousemove = null; //3.成功解锁后的回调函数 setTimeout(function(){ alert('解锁成功！'); },100); } } //四、给文档注册鼠标松开事件 document.onmouseup = function(e){ //如果鼠标松开时，滑到了终点，则验证通过 if(success){ return; }else{ //反之，则将滑块复位（设置了1s的属性过渡效果） btn.style.left = 0; bg.style.width = 0; btn.style.transition = \"left 1s ease\"; bg.style.transition = \"width 1s ease\"; } //只要鼠标松开了，说明此时不需要拖动滑块了，那么就清除鼠标移动和松开事件。 document.onmousemove = null; document.onmouseup = null; } } \u003c/script\u003e ","date":"2024-08-09","objectID":"/posts/text14/:0:3","tags":["JavaScript"],"title":"JS 验证码功能的三种实现方式","uri":"/posts/text14/"},{"categories":null,"content":"利用来JS控制页面控件显示和隐藏有两种方法，两种方法分别利用HTML的style中的两个属性，两种方法的不同之处在于控件隐藏后是否还在页面上占空位。 ","date":"2024-08-09","objectID":"/posts/text013/:0:0","tags":["javascript"],"title":"JS控制元素的显示和隐藏","uri":"/posts/text013/"},{"categories":null,"content":"方法一 document.getElementById(\"EleId\").style.visibility=\"hidden\"; document.getElementById(\"EleId\").style.visibility=\"visible\"; 利用上述方法实现隐藏后，页面的位置还被控件占用，显示空白。 ","date":"2024-08-09","objectID":"/posts/text013/:0:1","tags":["javascript"],"title":"JS控制元素的显示和隐藏","uri":"/posts/text013/"},{"categories":null,"content":"方法二 document.getElementById(\"EleId\").style.display=\"none\"; document.getElementById(\"EleId\").style.display=\"inline\"; 利用上述方法实现隐藏后，页面的位置不被占用。 ","date":"2024-08-09","objectID":"/posts/text013/:0:2","tags":["javascript"],"title":"JS控制元素的显示和隐藏","uri":"/posts/text013/"},{"categories":null,"content":"方法三 显示元素进行隐藏 document.getElementById(\"ID名\").hidden=ture; 根据页面元素ID名获得页面元素值，进而将其属性设置成隐藏。 将隐藏元素进行显示对于已经隐藏的页面元素如果要将其再次显示，不是将 document.getElementById(\"ID名\").hidden=false; 而是将其隐藏属性删除 document.getElementById(\"ID名\").removeAttribute(\"hidden\"); ","date":"2024-08-09","objectID":"/posts/text013/:0:3","tags":["javascript"],"title":"JS控制元素的显示和隐藏","uri":"/posts/text013/"},{"categories":null,"content":"Oracle查询sql 查询系统当前日期 select sysdate from dual; 请查询每个员工的名字、薪水和加薪15.5%之后的薪水（trunc取整） Select 名字,薪水,trunc(薪水*1.155) \"new salary\" from employees; 请显示所有以’J’，‘A’，‘M’打头的员工的名字和名字长度，且按照名字排升序 select 名字,LENGTH(名字) from employees where substr(名字,0,1) in ('J','A','M') order by 名字 asc; 请查询员工名和工作时间（换算成月并取整），并按工作时间排降序 Select 名,trunc(months_between(sysdate,时间),0) from employees order by trunc(months_between(sysdate,时间),0) desc; 请查询员工的名字和薪水，并将薪水列变成15个字符长度，左边填充“$”符号 select 名字,lpad(薪水,15,'$') from employees; 请查询部门id为90的所有员工的名字和他们参加工作的星期数(保留2位小数，不需要四舍五入)使用 select 名字 , trunc((参加工作星期数)/7,2) from employees where 员工id=90 创建报告，显示员工名和奖金系数,如果奖金系数为空,则显示$无奖金 select 名字,decode(奖金系数,'','无奖金',奖金系数) from employees; 请使用case语句，查询员工的job_id和级别.例如: select t.job_id, decode(t.job_id, 'AD_PRES', 'A','ST_MAN', 'B','IT_PROG', 'C','SA_REP', 'D','ST_CLERK', 'E','0') from employees t; 或者 Select job_id, case job_id when 'AD_PRES' then 'A' when 'ST_MAN' then 'B' when 'IT_PROG' then 'C' when 'SA_REP' then 'D' when 'ST_CLERK' then 'E' else '0' end \"Grage\" from employees; ","date":"2024-08-09","objectID":"/posts/text18/:0:0","tags":["sql","Oracle"],"title":"Oracle查询sql","uri":"/posts/text18/"},{"categories":null,"content":"子=\u003e父 子组件向父组件传参的方式通常通过事件来实现。具体步骤如下： 在子组件中定义事件：子组件可以通过 $emit 方法触发一个自定义事件，并传递参数 // 子组件 ChildComponent.vue \u003ctemplate\u003e \u003cbutton @click=\"sendDataToParent\"\u003e向父组件传参\u003c/button\u003e \u003c/template\u003e \u003cscript\u003e export default { methods: { sendDataToParent() { let data = '这是子组件传递给父组件的数据'; this.$emit('child-event', data); } } } \u003c/script\u003e 在上面的代码中，sendDataToParent 方法通过 $emit 发送了一个名为 child-event 的事件，并将 data 作为参数传递给父组件 2.在父组件中监听事件：父组件需要在使用子组件的地方监听这个事件，并处理子组件传递过来的数据 // 父组件 ParentComponent.vue \u003ctemplate\u003e \u003cdiv\u003e \u003cp\u003e从子组件接收到的数据：{{ receivedData }}\u003c/p\u003e \u003cchild-component @child-event=\"handleChildEvent\"\u003e\u003c/child-component\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript\u003e import ChildComponent from './ChildComponent.vue'; export default { components: { ChildComponent }, data() { return { receivedData: '' }; }, methods: { handleChildEvent(data) { this.receivedData = data; } } } \u003c/script\u003e 在父组件中，使用 标签引入子组件，并通过 @child-event 监听子组件触发的 child-event 事件。当事件被触发时，handleChildEvent 方法会被调用，并将子组件传递的 data 参数赋值给 receivedData。 通过以上方式，子组件就能够向父组件传递数据了。 ","date":"2024-08-09","objectID":"/posts/text17/:0:1","tags":["vue","javascript"],"title":"子组件向父组件相互传参的方式","uri":"/posts/text17/"},{"categories":null,"content":"父=\u003e子 Vue项目中在父组件中直接调用子组件的方法 方案一：通过ref直接调用子组件的方法 //父组件中 \u003ctemplate\u003e \u003cdiv\u003e \u003cButton @click=\"handleClick\"\u003e点击调用子组件方法\u003c/Button\u003e \u003cChild ref=\"child\"/\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript\u003e import Child from './child'; export default { methods: { handleClick() { this.$refs.child.sing(); }, }, } \u003c/script\u003e //子组件中 \u003ctemplate\u003e \u003cdiv\u003e我是子组件\u003c/div\u003e \u003c/template\u003e \u003cscript\u003e export default { methods: { sing() { console.log('我是子组件的方法'); }, }, }; \u003c/script\u003e 方案二：通过组件的$emit、$on方法 //父组件中 \u003ctemplate\u003e \u003cdiv\u003e \u003cButton @click=\"handleClick\"\u003e点击调用子组件方法\u003c/Button\u003e \u003cChild ref=\"child\"/\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript\u003e import Child from './child'; export default { methods: { handleClick() { this.$refs.child.$emit(\"childmethod\") //子组件$on中的名字 }, }, } \u003c/script\u003e //子组件中 \u003ctemplate\u003e \u003cdiv\u003e我是子组件\u003c/div\u003e \u003c/template\u003e \u003cscript\u003e export default { mounted() { this.$nextTick(function() { this.$on('childmethods', function() { console.log('我是子组件方法'); }); }); }, }; \u003c/script\u003e ","date":"2024-08-09","objectID":"/posts/text17/:0:2","tags":["vue","javascript"],"title":"子组件向父组件相互传参的方式","uri":"/posts/text17/"},{"categories":null,"content":"腾讯云直播推流器TXLivePusher ：https://webrtc-demo.myqcloud.com/push-sdk/v2/docs/TXLivePusher.html 这里是：直播和点播播放的 Web 播放器（ TCPlayer ）的相关参数以及 API 1.直播推流 直播推流需要第三方库 \u003cscript src=\"https://video.sdk.qcloudecdn.com/web/TXLivePusher-2.0.3.min.js\" charset=\"utf-8\"\u003e\u003c/script\u003e 直播推流代码 var livePusher = new TXLivePusher(); console.log(livePusher); livePusher.setRenderView('id_local_video'); // 设置视频质量 livePusher.setVideoQuality('720p'); // 设置音频质量 livePusher.setAudioQuality('standard'); // 自定义设置帧率 livePusher.setProperty('setVideoFPS', 25); // 采集完摄像头和麦克风之后自动推流 Promise.all([livePusher.startScreenCapture(), livePusher.startMicrophone()]) .then(function () { //传入的是一个推流地址，后端返回的，把后端返回的一个地址前边的rtmp换成webrtc就可以了 livePusher.startPush(推流地址) .then(() =\u003e { console.log('pushing'); if (livePusher.isPushing()) { console.log('pushing'); } }) .catch(err =\u003e { console.log(err); }) }) .catch(err =\u003e { console.log(err); }) 2.直播拉流 直播拉流所需第三方库 \u003clink href=\"https://web.sdk.qcloud.com/player/tcplayer/release/v4.7.2/tcplayer.min.css\" rel=\"stylesheet\" /\u003e \u003c!--如果需要在 Chrome 和 Firefox 等现代浏览器中通过 H5 播放 Webrtc 视频，需要在 tcplayer.vx.x.x.min.js 之前引入 TXLivePlayer-x.x.x.min.js。--\u003e \u003c!--有些浏览器环境不支持 Webrtc，播放器会将 Webrtc 流地址自动转换为 HLS 格式地址，因此快直播场景同样需要引入hls.min.x.xx.xm.js。--\u003e \u003cscript src=\"https://web.sdk.qcloud.com/player/tcplayer/release/v4.7.2/libs/TXLivePlayer-1.2.3.min.js\"\u003e\u003c/script\u003e \u003c!--如果需要在 Chrome 和 Firefox 等现代浏览器中通过 H5 播放 HLS 协议的视频，需要在 tcplayer.vx.x.x.min.js 之前引入 hls.min.x.xx.xm.js。--\u003e \u003cscript src=\"https://web.sdk.qcloud.com/player/tcplayer/release/v4.7.2/libs/hls.min.1.1.6.js\"\u003e\u003c/script\u003e \u003c!--如果需要在 Chrome 和 Firefox 等现代浏览器中通过 H5 播放 FLV 格式的视频，需要在 tcplayer.vx.x.x.min.js 之前引入 flv.min.x.x.x.js。--\u003e \u003cscript src=\"https://web.sdk.qcloud.com/player/tcplayer/release/v4.7.2/libs/flv.min.1.6.3.js\"\u003e\u003c/script\u003e \u003c!--如果需要在 Chrome 和 Firefox 等现代浏览器中通过 H5 播放 DASH 视频，需要在 tcplayer.vx.x.x.min.js 之前引入 dash.min.x.x.x.js。--\u003e \u003cscript src=\"https://web.sdk.qcloud.com/player/tcplayer/release/v4.7.2/libs/dash.all.min.4.5.2.js\"\u003e\u003c/script\u003e \u003c!--播放器脚本文件--\u003e \u003cscript src=\"https://web.sdk.qcloud.com/player/tcplayer/release/v4.7.2/tcplayer.v4.7.2.min.js\"\u003e\u003c/script\u003e 播放容器 \u003cvideo id=\"player-container-id\" preload=\"auto\" playsinline webkit-playsinline\u003e\u003c/video\u003e 拉流js var player = TCPlayer('player-container-id', {}); // player-container-id 为播放器容器 ID，必须与 html 中一致 player.src(url); // url 播放地址 直播视频全屏canvas元素无法在最上层 直播弹幕无法在最上层，将z-index设置为最大也没效果，那是因为第三方库用了一个toplayer的东西将播放视频的元素放到最顶层了，用css设置的东西没效果，解决方案就是设置个延时器，等到第三方库把元素放置到页面之后dom操作canvas元素，将其放置到设置toplayer的盒子里边，这样就可以了 ","date":"2024-08-09","objectID":"/posts/text16/:0:0","tags":["腾讯云直播"],"title":"腾讯云直播前端","uri":"/posts/text16/"},{"categories":null,"content":"StringEscapeUtils类可以对html js xml sql 等代码进行转义来防止SQL注入及XSS注入 添加依赖 \u003cdependency\u003e \u003cgroupId\u003ecommons-lang\u003c/groupId\u003e \u003cartifactId\u003ecommons-lang\u003c/artifactId\u003e \u003cversion\u003e2.6\u003c/version\u003e \u003c/dependency\u003e 1.html脚本 escapeHtml转义html脚本 unescapeHtml反转义html脚本 System.out.println(StringEscapeUtils.escapeHtml(\"\u003ca\u003eabc\u003c/a\u003e\")); System.out.println(StringEscapeUtils.unescapeHtml(\"\u0026lt;a\u0026gt;abc\u0026lt;/a\u0026gt;\")); 输出 \u0026lt;a\u0026gt;abc\u0026lt;/a\u0026gt; \u003ca\u003eabc\u003c/a\u003e 2.js脚本 escapeJavaScript转义js脚本 unescapeJavaScript反转义js脚本 System.out.println(StringEscapeUtils.escapeJavaScript(\"\u003cscript\u003ealert('123')\u003cscript\u003e\")); System.out.println(StringEscapeUtils.unescapeJavaScript(\"\u003cscript\u003ealert(\\'123\\')\u003cscript\u003e\")); 输出 \u003cscript\u003ealert(\\'123\\')\u003cscript\u003e \u003cscript\u003ealert('123')\u003cscript\u003e 3.字符串Unicode　escapeJava转义成Unicode编码 unescapeJava反转义成Unicode编码 System.out.println(StringEscapeUtils.escapeJava(\"你好\")); System.out.println(StringEscapeUtils.unescapeJava(\"\\u4F60\\u597D\")); 输出 \\u4F60\\u597D 你好 4.xml escapeXML转义XML unescapeXML反转义XML System.out.println(StringEscapeUtils.escapeXml(\"\u003cname\u003e贝贝\u003c/name\u003e\")); System.out.println(StringEscapeUtils.unescapeXml(\"\u0026lt;name\u0026gt;\u0026#36125;\u0026#36125;\u0026lt;/name\u0026gt;\")); 输出 \u0026lt;name\u0026gt;\u0026#36125;\u0026#36125;\u0026lt;/name\u0026gt; \u003cname\u003e贝贝\u003c/name\u003e 5.sql escapeSql sql转义，防止sql注入攻击 转义后 StringBuffer sql = new StringBuffer(\"select * from users where 1=1 \"); String keyWord=\"aaa' or '1=1\"; if(!keyWord.isEmpty()){ sql.append(\" and username like '%\" + StringEscapeUtils.escapeSql(keyWord) + \"%'\"); } System.out.println(sql); 输出 select * from users where 1=1 and username like '%aaa'' or ''1=1%' 不进行转义的 select * from users where 1=1 and username like '%aaa' or '1=1%' ","date":"2024-08-09","objectID":"/posts/text15/:0:0","tags":["java"],"title":"转义StringEscapeUtils的使用","uri":"/posts/text15/"},{"categories":null,"content":"IDEA在Database中连接达梦数据库 repository-达梦8maven.zip · Jared.Yan/dameng-maven - Gitee.com 如果是连接项目代码中的达梦数据库，此处选择的jar包为项目代码依赖中的dm.jar 1、idea右侧点击database 2、照着我的点就行，驱动包记得得先加上才会出现class选项 3、回到主页面，添加一个数据库连接。 4、测试连接，连接成功 ","date":"2024-06-13","objectID":"/posts/text10/:0:0","tags":["达梦数据库"],"title":"IDEA在Database中连接达梦数据库","uri":"/posts/text10/"},{"categories":null,"content":"打开命令行，输入mstsc 点击确认 出现以下界面 输入ip地址及端口号，然后点击连接 提示页面均点，连接 提示页面均点，是 输入用户名和密码即可 ","date":"2024-04-04","objectID":"/posts/text06/:0:0","tags":["远程"],"title":"远程登陆服务器教程","uri":"/posts/text06/"},{"categories":null,"content":"1、现象如下 2、解决办法 3、或者搜索框输入ESLint，选择禁用 ","date":"2022-10-28","objectID":"/posts/text05/:0:0","tags":["vue"],"title":"idea导入ta404前端项目代码后js文件中注释报红色波浪线解决办法","uri":"/posts/text05/"},{"categories":null,"content":"python官网地址：https://www.python.org/ 第1步：先勾选，再安装，上面是默认安装路径，下面是自定义安装路径 等待安装 安装完成，设置MAX_PATH，授管理员权限 打开终端窗口，输入python命令，验证是否安装成功 ","date":"2022-07-08","objectID":"/posts/text04/:0:0","tags":["Python"],"title":"Python下载与安装操作步骤","uri":"/posts/text04/"},{"categories":null,"content":"报错信息Exception in thread “AWT-EventQueue-0” java.lang.UnsatisfiedLinkError: Unable to load library ‘c:\\dcrf32.dll’:Native library (win32-x86-64/c:\\dcrf32.dll) not found in resource path 翻译过来就是：线程“AWT-EventQueue-0”出现异常，无法加载库’c:\\dcrf32.dll’:本机库(win32-x86-64/c:\\dcrf32.dll)在资源路径中找不到 解决办法： 1、我先是检查了jdk 版本，jre是不是选择和动态库相同位数的32 or 64？ 检查jdk版本位数的方法: java -version 2、 动态库是否添加到jdk里面？我检查的时候，是加了的，但是还是报找不到 3、是不是动态库要求放到具体某一个文件夹下了？ Unable to load library ‘c:\\dcrf32.dll’:Native library (win32-x86-64/c:\\dcrf32.dll) not found 这个括号里面搜索的动态库的位置在c盘根目录下，很像是代码写死了访问位置。于是我找代码去了，确实代码里面是指定要求限制了。 解决办法：把动态库的位置移动到c盘根目录下，或者代码访问位置去掉前面的磁盘限制。 这个错找了很久，特此记录 ","date":"2022-05-18","objectID":"/posts/text03/:0:0","tags":["dll文件引用","intellij idea","jar"],"title":"dcrf32.dll","uri":"/posts/text03/"},{"categories":null,"content":"一、聚合函数 有一个学生表如下： ","date":"2021-07-12","objectID":"/posts/text11/:1:0","tags":["SQL"],"title":"SQL语句部分写法","uri":"/posts/text11/"},{"categories":null,"content":"count 1、统计记录总个数 SELECT COUNT (*) FROM 学生表 若要命名 SELECT COUNT (* ) as 学生总人数 FROM 学生表 2、统计指定列的值的数目（NULL 值不计入） SELECT COUNT (专业代码) FROM 学生表 3、统计指定列，拥有不同值的数目（NULL 值不计入） SELECT COUNT (distinct 专业代码) FROM 学生表 ","date":"2021-07-12","objectID":"/posts/text11/:1:1","tags":["SQL"],"title":"SQL语句部分写法","uri":"/posts/text11/"},{"categories":null,"content":"sum 4、计算某一列值的总和 SELECT sum(高考分数) as 高考总分数 FROM 学生表 ","date":"2021-07-12","objectID":"/posts/text11/:1:2","tags":["SQL"],"title":"SQL语句部分写法","uri":"/posts/text11/"},{"categories":null,"content":"MAX、MIN、AVG 5、求某一列值的最大值 MAX 函数返回一列中的最大值。NULL 值不包括在计算中。 注释：MIN 和 MAX 也可用于文本列，以获得按字母顺序排列的最高或最低值。 SELECT MAX(高考分数) as 高考最高分数 FROM 学生表 6、求某一列值的最小值 SELECT MIN(高考分数) as 高考最低分数 FROM 学生表 7、求某一列值的平均值 SELECT AVG(高考分数) as 高考最高分数 FROM 学生表 ","date":"2021-07-12","objectID":"/posts/text11/:1:3","tags":["SQL"],"title":"SQL语句部分写法","uri":"/posts/text11/"},{"categories":null,"content":"FIRST、ROUND 6、取指定字段的第一个记录的值 select first(column_name) from table_name 7、ROUND() 函数（四舍五入规则）、用于把数值字段舍入为指定的小数位数。 SELECT round(列名,小数位数) FROM table_name ","date":"2021-07-12","objectID":"/posts/text11/:1:4","tags":["SQL"],"title":"SQL语句部分写法","uri":"/posts/text11/"},{"categories":null,"content":"MID 8、MID() 函数 ：用于从文本字段中提取字符。 SELECT MID(列名,开始截取位置,结束截取位置) FROM table_name SELECT MID(列名,1,3) FROM table_name 3不写，默认返回剩余的所有字段 ","date":"2021-07-12","objectID":"/posts/text11/:1:5","tags":["SQL"],"title":"SQL语句部分写法","uri":"/posts/text11/"},{"categories":null,"content":"LEN 9、LEN 函数返回文本字段中值的长度。 SELECT LEN(列名) FROM table_name ","date":"2021-07-12","objectID":"/posts/text11/:1:6","tags":["SQL"],"title":"SQL语句部分写法","uri":"/posts/text11/"},{"categories":null,"content":"二、数据库查询前10条数据 Oracle中查询 select * from table where rownum\u003c=10; DB2中查询 select * from table fetch first 10 rows only; MySql中查询 select * from table limit 10; ","date":"2021-07-12","objectID":"/posts/text11/:2:0","tags":["SQL"],"title":"SQL语句部分写法","uri":"/posts/text11/"},{"categories":null,"content":"三、SQL语言多表关联查询 一、外连接 外连接可分为：左连接、右连接、完全外连接。 select * from A表 left join B表 on A表条件 = B表条件 左外连接包含left join左表所有行，如果左表中某行在右表没有匹配，则结果中对应行右表的部分全部为空(NULL) select * from A表 right join B表 on A表条件 = B表条件 右外连接包含right join右表所有行，如果左表中某行在右表没有匹配，则结果中对应左表的部分全部为空(NULL)。 select * from A表 full join B表 on A表条件 = B表条件 完全外连接包含full join左右两表中所有的行，如果右表中某行在左表中没有匹配，则结果中对应行右表的部分全部为空(NULL)，如果左表中某行在右表中没有匹配，则结果中对应行左表的部分全部为空(NULL)。 二、内连接 join 或 inner join select * from A表 join B表 on A表条件 = B表条件 inner join 是比较运算符，只返回符合条件的行。 ","date":"2021-07-12","objectID":"/posts/text11/:3:0","tags":["SQL"],"title":"SQL语句部分写法","uri":"/posts/text11/"},{"categories":null,"content":"此网站建立于2024年七夕…… ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"关于我们","uri":"/about/"}]